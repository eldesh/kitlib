_require "basis.smi"
_require "hashtable/Polyhash.smi"
_require "eqhashdyn2.smi"
_require "bitstream.smi"
_require "pickle.sig"

structure Pickle (* :> PICKLE *) =
struct
  type 'a pu (= boxed)

  val pickle    : 'a pu -> 'a -> string
  val unpickle  : 'a pu -> string -> 'a

  type hce (= boxed)
  val empty_hce : unit -> hce
  val unpickle' : 'a pu -> hce -> string -> 'a * hce

  val word      : word pu
  val word32    : Word32.word pu
  val int       : int pu
  val int32     : Int32.int pu
  val bool      : bool pu
  val string    : string pu
  val char      : char pu
  val time      : Time.time pu
  val real      : real pu
  val unit      : unit pu
  val pairGen   : 'a pu * 'b pu -> ('a * 'b) pu
  val tup3Gen   : 'a pu * 'b pu * 'c pu -> ('a * 'b * 'c) pu
  val tup4Gen   : 'a pu * 'b pu * 'c pu * 'd pu -> ('a * 'b * 'c * 'd) pu
  val pairGen0  : 'a pu * 'b pu -> ('a * 'b) pu
  val tup3Gen0  : 'a pu * 'b pu * 'c pu -> ('a * 'b * 'c) pu
  val tup4Gen0  : 'a pu * 'b pu * 'c pu * 'd pu -> ('a * 'b * 'c * 'd) pu
  val refEqGen  : ('a ref * 'a ref -> bool) -> 'a -> 'a pu -> 'a ref pu
  val refGen    : 'a -> 'a pu -> 'a ref pu
  val ref0Gen   : 'a pu -> 'a ref pu
  val refOneGen : 'a pu -> 'a ref pu
  val ref0EqGen : ('a ref * 'a ref -> bool) -> 'a pu -> 'a ref pu
  val ref0ShGen : 'a pu -> 'a ref pu
  val listGen   : 'a pu -> 'a list pu
  val optionGen : 'a pu -> 'a option pu
  val vectorGen : 'a pu -> 'a Vector.vector pu
  val shareGen  : 'a pu -> 'a pu
  val enumGen   : string * ''a list -> ''a pu     

  val dataGen   : string * ('a->int) * ('a pu -> 'a pu) list -> 'a pu
  val data2Gen  : string * ('a->int) * ('a pu * 'b pu -> 'a pu) list 
              * string * ('b->int) * ('a pu * 'b pu -> 'b pu) list 
                  -> 'a pu * 'b pu

  val data3Gen  : string * ('a->int) * ('a pu * 'b pu * 'c pu -> 'a pu) list 
              * string * ('b->int) * ('a pu * 'b pu * 'c pu -> 'b pu) list 
              * string * ('c->int) * ('a pu * 'b pu * 'c pu -> 'c pu) list 
                  -> 'a pu * 'b pu * 'c pu

  val con0      : 'a -> 'b -> 'a pu
  val con1      : ('a->'b) -> ('b->'a) -> 'a pu -> 'b pu

  val convert   : ('a->'b) * ('b->'a) -> 'a pu -> 'b pu
  val convert0  : ('a->'b) * ('b->'a) -> 'a pu -> 'b pu

  val cache     : string -> ('a -> 'b pu) -> 'a -> 'b pu
  val cache2    : string -> ('a -> 'b pu * 'c pu) -> 'a -> 'b pu * 'c pu

  val register  : string -> 'a list -> 'a pu -> 'a pu

  val registerEq: ('a*'a->bool) -> ('a->int) 
              -> string -> 'a list -> 'a pu -> 'a pu

  val hashCons  : 'a pu -> 'a pu
  val hashConsEq: ('a*'a->bool) -> 'a pu -> 'a pu

  val newHash      : ('a -> int) -> 'a pu -> 'a pu
  val combHash     : ('a -> int) -> 'a pu -> 'a pu
  val maybeNewHash : ('a -> int option) -> 'a pu -> 'a pu

  val debug     : string -> 'a pu -> 'a pu
  val nameGen   : string -> 'a pu -> 'a pu
  val comment   : string -> 'a pu -> 'a pu
  val checkUnpickle : ('a -> unit) -> 'a pu -> 'a pu
  val debugUnpickle : string -> 'a pu -> 'a pu
end

